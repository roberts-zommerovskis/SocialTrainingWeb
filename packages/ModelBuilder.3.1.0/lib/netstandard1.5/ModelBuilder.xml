<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelBuilder</name>
    </assembly>
    <members>
        <member name="T:ModelBuilder.AddressValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.AddressValueGenerator" />
                class is used to generate postal addressing values.
            </summary>
        </member>
        <member name="M:ModelBuilder.AddressValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.AddressValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.AddressValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.AddressValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.AgeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.AgeValueGenerator" />
                class is used to generate numbers that should represent a persons age.
            </summary>
        </member>
        <member name="M:ModelBuilder.AgeValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.AgeValueGenerator.GetMaximum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.AgeValueGenerator.GetMinimum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.AgeValueGenerator.DefaultMaxAge">
            <summary>
                Gets or sets the default maximum age that can be generated.
            </summary>
        </member>
        <member name="P:ModelBuilder.AgeValueGenerator.MaxAge">
            <summary>
                Gets or sets the maximum age generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.AgeValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ArrayTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.ArrayTypeCreator" />
                class is used to create an instance from array types.
            </summary>
        </member>
        <member name="M:ModelBuilder.ArrayTypeCreator.CanCreate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ArrayTypeCreator.CanPopulate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ArrayTypeCreator.Create(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ArrayTypeCreator.Populate(System.Object,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ArrayTypeCreator.CreateChildItem(System.Type,ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Creates a child item given the context of a possible previous item being created.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="previousItem">The previous item generated, or <c>null</c>.</param>
            <returns>The new item generated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="P:ModelBuilder.ArrayTypeCreator.DefaultMaxCount">
            <summary>
                Gets or sets the default maximum count that can be generated.
            </summary>
        </member>
        <member name="P:ModelBuilder.ArrayTypeCreator.AutoDetectConstructor">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ArrayTypeCreator.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ArrayTypeCreator.MaxCount">
            <summary>
                Gets or sets the maximum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.ArrayTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BooleanValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.BooleanValueGenerator" />
                class is used to generate random <see cref="T:System.Boolean" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.BooleanValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BooleanValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.BooleanValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildConfigurationExtensions">
            <summary>
                The <see cref="T:ModelBuilder.Extensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Clone(ModelBuilder.IBuildConfiguration)">
            <summary>
                Clones the specified builder strategy and returns a compiler.
            </summary>
            <param name="configuration">The build configuration to create the instance with.</param>
            <returns>The new build strategy compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.BuildException">
            <summary>
            The <see cref="T:ModelBuilder.BuildException"/>
            class is used to describe a failure to build an instance of a type. 
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildException"/> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Type,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="targetType">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="context">The possible context object the instance is being created for.</param>
            <param name="buildLog">The build log.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Type,System.String,System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="targetType">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="context">The possible context object the instance is being created for.</param>
            <param name="buildLog">The build log.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="P:ModelBuilder.BuildException.BuildLog">
            <summary>
            Gets or sets the build log.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.Context">
            <summary>
            Gets or sets the context of the build action.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.ReferenceName">
            <summary>
            Gets or sets the reference name of the build action.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.TargetType">
            <summary>
            Gets or sets the target type of the build action.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildStrategy">
            <summary>
                The <see cref="T:ModelBuilder.BuildStrategy" />
                class is used to provide a basic build strategy.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategy.#ctor(ModelBuilder.IConstructorResolver,ModelBuilder.IPropertyResolver,System.Collections.Generic.IEnumerable{ModelBuilder.CreationRule},System.Collections.Generic.IEnumerable{ModelBuilder.ITypeCreator},System.Collections.Generic.IEnumerable{ModelBuilder.IValueGenerator},System.Collections.Generic.IEnumerable{ModelBuilder.IgnoreRule},System.Collections.Generic.IEnumerable{ModelBuilder.ExecuteOrderRule},System.Collections.Generic.IEnumerable{ModelBuilder.IPostBuildAction})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildStrategyBase" /> class.
            </summary>
            <param name="constructorResolver">The constructor resolver.</param>
            <param name="propertyResolver">The property resolver.</param>
            <param name="creationRules">The creation rules.</param>
            <param name="typeCreators">The type creators.</param>
            <param name="valueGenerators">The value generators.</param>
            <param name="ignoreRules">The ignore rules.</param>
            <param name="executeOrderRules">The execute order rules.</param>
            <param name="postBuildActions">The post-build actions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructorResolver" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyResolver" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creationRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeCreators" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerators" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ignoreRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeOrderRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildActions" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategy.GetBuildLog">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildStrategy.GetExecuteStrategy``1">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildStrategyBase">
            <summary>
                The <see cref="T:ModelBuilder.BuildStrategyBase" />
                class is used to provide the base framework for a build strategy.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategyBase.#ctor(ModelBuilder.IConstructorResolver,ModelBuilder.IPropertyResolver,System.Collections.Generic.IEnumerable{ModelBuilder.CreationRule},System.Collections.Generic.IEnumerable{ModelBuilder.ITypeCreator},System.Collections.Generic.IEnumerable{ModelBuilder.IValueGenerator},System.Collections.Generic.IEnumerable{ModelBuilder.IgnoreRule},System.Collections.Generic.IEnumerable{ModelBuilder.ExecuteOrderRule},System.Collections.Generic.IEnumerable{ModelBuilder.IPostBuildAction})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildStrategyBase" /> class.
            </summary>
            <param name="constructorResolver">The constructor resolver.</param>
            <param name="propertyResolver">The property resolver.</param>
            <param name="creationRules">The creation rules.</param>
            <param name="typeCreators">The type creators.</param>
            <param name="valueGenerators">The value generators.</param>
            <param name="ignoreRules">The ignore rules.</param>
            <param name="executeOrderRules">The execute order rules.</param>
            <param name="postBuildActions">The post build actions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructorResolver" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyResolver" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creationRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeCreators" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerators" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ignoreRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeOrderRules" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildActions" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyBase.GetBuildLog">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildStrategyBase.GetExecuteStrategy``1">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.ConstructorResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.CreationRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.ExecuteOrderRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.IgnoreRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.PostBuildActions">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.PropertyResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.TypeCreators">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyBase.ValueGenerators">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildStrategyCompiler">
            <summary>
            The <see cref="T:ModelBuilder.BuildStrategyCompiler"/>
            class is used to assist in creating a new <see cref="T:ModelBuilder.IBuildStrategy"/> instance.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompiler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.BuildStrategyCompiler"/> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompiler.Compile">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">The <see cref="P:ModelBuilder.BuildStrategyCompiler.ConstructorResolver"/> property is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.ConstructorResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.PropertyResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.CreationRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.ExecuteOrderRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.IgnoreRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.PostBuildActions">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.TypeCreators">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildStrategyCompiler.ValueGenerators">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildStrategyCompilerExtensions">
            <summary>
                The <see cref="T:ModelBuilder.BuildStrategyCompilerExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildStrategyCompiler" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.IPostBuildAction)">
            <summary>
                Adds a new post-build action to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="postBuildAction">The post-build action.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildAction" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.ExecuteOrderRule)">
            <summary>
                Adds a new execute order rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="rule">The rule.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.IgnoreRule)">
            <summary>
                Adds a new ignore rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="rule">The rule.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.CreationRule)">
            <summary>
                Adds a new creation rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="rule">The rule.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.ITypeCreator)">
            <summary>
                Adds a new type creator to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="typeCreator">The type creator.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeCreator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.IValueGenerator)">
            <summary>
                Adds a new value generator to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="valueGenerator">The value generator.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.Add(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.ICompilerModule)">
            <summary>
                Adds configuration provided by the specified compiler module.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="module">The module.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="module" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddCreationRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new creation rule to the compiler.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddCreationRule``1(ModelBuilder.IBuildStrategyCompiler,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Object)">
            <summary>
                Adds a new creation rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <param name="priority">The priority of the rule.</param>
            <param name="value">The static value returned by the rule.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddExecuteOrderRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new execute order rule to the compiler.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddExecuteOrderRule``1(ModelBuilder.IBuildStrategyCompiler,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>
                Adds a new execute order rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <param name="priority">The priority of the rule.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddIgnoreRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new ignore rule to the compiler.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddCompilerModule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a configuration of a compiler module to the compiler.
            </summary>
            <typeparam name="T">The type of compiler module to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddIgnoreRule``1(ModelBuilder.IBuildStrategyCompiler,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Adds a new ignore rule to the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddPostBuildAction``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new post-build action to the compiler.
            </summary>
            <typeparam name="T">The type of post-build action to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddTypeCreator``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new type creator to the compiler.
            </summary>
            <typeparam name="T">The type of type creator to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.AddValueGenerator``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Adds a new value generator to the compiler.
            </summary>
            <typeparam name="T">The type of value generator to add.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemoveCreationRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes creation rules from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemoveExecuteOrderRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes execute order rules from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemoveIgnoreRule``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes ignore rules from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemovePostBuildAction``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes post-build actions from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of post-build action to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemoveTypeCreator``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes type creators from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of type creator to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.RemoveValueGenerator``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Removes value generators from the compiler that match the specified type.
            </summary>
            <typeparam name="T">The type of value generator to remove.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.SetConstructorResolver``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Sets the constructor resolver on the compiler.
            </summary>
            <typeparam name="T">The type of constructor resolver to use.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.SetConstructorResolver(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.IConstructorResolver)">
            <summary>
                Sets the constructor resolver on the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="resolver">The resolver.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resolver" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.SetPropertyResolver``1(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Sets the property resolver on the compiler.
            </summary>
            <typeparam name="T">The type of property resolver to use.</typeparam>
            <param name="compiler">The compiler.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyCompilerExtensions.SetPropertyResolver(ModelBuilder.IBuildStrategyCompiler,ModelBuilder.IPropertyResolver)">
            <summary>
                Sets the property resolver on the compiler.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="resolver">The resolver.</param>
            <returns>The compiler.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="compiler" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resolver" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.BuildStrategyExtensions">
            <summary>
                The <see cref="T:ModelBuilder.Extensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildStrategy" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.Create``1(ModelBuilder.IBuildStrategy)">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the specified build strategy.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="buildStrategy">The build strategy to create the instance with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.Create(ModelBuilder.IBuildStrategy,System.Type)">
            <summary>
                Creates an instance of a type using the specified build strategy.
            </summary>
            <param name="buildStrategy">The build strategy to create the instance with.</param>
            <param name="instanceType">The type of instance to create.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.CreateWith``1(ModelBuilder.IBuildStrategy,System.Object[])">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the specified build strategy and constructor arguments.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="buildStrategy">The build strategy to create the instance with.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.CreateWith(ModelBuilder.IBuildStrategy,System.Type,System.Object[])">
            <summary>
                Creates an instance of a type using the specified build strategy and constructor arguments.
            </summary>
            <param name="buildStrategy">The build strategy to create the instance with.</param>
            <param name="instanceType">The type of instance to create.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.Ignoring``1(ModelBuilder.IBuildStrategy,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Appends a new <see cref="T:ModelBuilder.IgnoreRule" /> to the specified <see cref="T:ModelBuilder.IExecuteStrategy`1" /> using the specified
                expression.
            </summary>
            <typeparam name="T">The type of instance that matches the rule.</typeparam>
            <param name="buildStrategy">The build strategy to clone.</param>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>A cloned build strategy with the new rule.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.Populate``1(ModelBuilder.IBuildStrategy,``0)">
            <summary>
                Populates the instance using the specified build strategy.
            </summary>
            <typeparam name="T">The type of instance to populate.</typeparam>
            <param name="buildStrategy">The build strategy.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.BuildStrategyExtensions.With``1(ModelBuilder.IBuildStrategy)">
            <summary>
                Returns a new <see cref="T:ModelBuilder.IExecuteStrategy`1" /> for the specified build strategy.
            </summary>
            <typeparam name="T">The type of execute strategy to return.</typeparam>
            <param name="buildStrategy">The build strategy.</param>
            <returns>A new execute strategy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildStrategy" /> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.CityValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.CityValueGenerator" />
                class is used to generate random city values.
            </summary>
        </member>
        <member name="M:ModelBuilder.CityValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CityValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.CityValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CityValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CompanyValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.CompanyValueGenerator" />
                class is used to generate random company name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.CompanyValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CompanyValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.CompanyValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CompanyValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CountryValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.CountryValueGenerator" />
                class is used to generate random country values.
            </summary>
        </member>
        <member name="M:ModelBuilder.CountryValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CountryValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.CountryValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CountryValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CountValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.CountValueGenerator" />
                class is used to generate numeric values for parameters and properties that look like count or length values.
            </summary>
        </member>
        <member name="M:ModelBuilder.CountValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CountValueGenerator.GetMaximum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CountValueGenerator.GetMinimum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CountValueGenerator.DefaultMaxCount">
            <summary>
                Gets or sets the default maximum count that can be generated.
            </summary>
        </member>
        <member name="P:ModelBuilder.CountValueGenerator.MaxCount">
            <summary>
                Gets or sets the maximum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.CountValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRule" />
                class is used to define simple value creation rules that bypass <see cref="T:ModelBuilder.ITypeCreator" /> and
                <see cref="T:ModelBuilder.IValueGenerator" /> usages.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Func{System.Type,System.String,System.Boolean},System.Int32,System.Func{System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="evaluator">The function that determines whether the rule is a match.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="creator">The function that creates the value for the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="evaluator" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creator" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Func{System.Type,System.String,System.Boolean},System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="evaluator">The function that determines whether the rule is a match.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="value">The static value returned by the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="evaluator" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Type,System.Text.RegularExpressions.Regex,System.Int32,System.Func{System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyExpression">The property name regular expression that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="creator">The function that creates the value for the rule.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="targetType" /> and <paramref name="propertyExpression" />
                parameters are both null.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creator" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Type,System.Text.RegularExpressions.Regex,System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyExpression">The property name regular expression that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="value">The static value returned by the rule.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="targetType" /> and <paramref name="propertyExpression" />
                parameters are both null.
            </exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Type,System.String,System.Int32,System.Func{System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyName">The property name that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="creator">The function that creates the value for the rule.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="targetType" /> and <paramref name="propertyName" />
                parameters are both null.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creator" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.#ctor(System.Type,System.String,System.Int32,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyName">The property name that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <param name="value">The static value returned by the rule.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="targetType" /> and <paramref name="propertyName" />
                parameters are both null.
            </exception>
        </member>
        <member name="M:ModelBuilder.CreationRule.Create(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Creates a value using the specified type, property name and context.
            </summary>
            <param name="type">The type to match.</param>
            <param name="propertyName">The property name to match.</param>
            <param name="executeStrategy">The execution strategy.</param>
        </member>
        <member name="M:ModelBuilder.CreationRule.IsMatch(System.Type,System.String)">
            <summary>
                Gets whether the specified type and property name match this rule.
            </summary>
            <param name="type">The type to match.</param>
            <param name="propertyName">The property name to match.</param>
            <returns><c>true</c> if the rule matches the specified type and property name; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.CreationRule.Priority">
            <summary>
                Gets the priority for this rule.
            </summary>
        </member>
        <member name="T:ModelBuilder.Data.People">
            <summary>
            The <see cref="T:ModelBuilder.Data.People"/>
            class is used to assist in deserializing test data of random people.
            </summary>
        </member>
        <member name="M:ModelBuilder.Data.People.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.Data.People"/> class.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.People.Items">
            <summary>
            Gets or sets the available people.
            </summary>
        </member>
        <member name="T:ModelBuilder.Data.Person">
            <summary>
            The <see cref="T:ModelBuilder.Data.Person"/>
            class is used to provide information about a random person in test data.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Company">
            <summary>
            Gets or sets the company.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Country">
            <summary>
            Gets or sets the country.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Domain">
            <summary>
            Gets or sets the domain name.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Gender">
            <summary>
            Gets or sets the binary gender.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.PostCode">
            <summary>
            Gets or sets the post code.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Person.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
        </member>
        <member name="T:ModelBuilder.Data.TestData">
            <summary>
            The <see cref="T:ModelBuilder.Data.TestData"/>
            class is used to expose some pre-generated test data.
            </summary>
        </member>
        <member name="M:ModelBuilder.Data.TestData.NextFemale">
            <summary>
            Returns a random female from the test data set.
            </summary>
            <returns>A random female.</returns>
        </member>
        <member name="M:ModelBuilder.Data.TestData.NextMale">
            <summary>
            Returns a random male from the test data set.
            </summary>
            <returns>A random male.</returns>
        </member>
        <member name="M:ModelBuilder.Data.TestData.NextPerson">
            <summary>
            Returns a random person from the test data set.
            </summary>
            <returns>A random person.</returns>
        </member>
        <member name="P:ModelBuilder.Data.TestData.Females">
            <summary>
            Gets a test data set of females.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.Males">
            <summary>
            Gets a test data set of males.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.People">
            <summary>
            Gets a test data set of people.
            </summary>
        </member>
        <member name="T:ModelBuilder.DateOfBirthValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.DateOfBirthValueGenerator" />
                class is used to generate random date of birth values.
            </summary>
        </member>
        <member name="M:ModelBuilder.DateOfBirthValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DateTimeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.DateOfBirthValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DateOfBirthValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DateTimeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.DateTimeValueGenerator" />
                class is used to generate random date time values.
            </summary>
        </member>
        <member name="M:ModelBuilder.DateTimeValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DateTimeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.DateTimeValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultBuildLog">
            <summary>
                The <see cref="T:ModelBuilder.DefaultBuildLog" />
                class provides default implementation for creating a build log when creating types and values.
            </summary>
            <threadsafety instance="false" />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.BuildFailure(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CircularReferenceDetected(System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.Clear">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedProperty(System.Type,System.String,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedType(System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingParameter(System.Type,System.Type,System.String,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedParameter(System.Type,System.Type,System.String,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingProperty(System.Type,System.String,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.IgnoringProperty(System.Type,System.String,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyType" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingType(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creatorType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingValue(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generatorType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PopulatedInstance(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PopulatingInstance(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PostBuildAction(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.WriteMessage(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultBuildLog.Output">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultBuildStrategyCompiler">
            <summary>
                The <see cref="T:ModelBuilder.DefaultBuildStrategyCompiler" />
                class provides a <see cref="T:ModelBuilder.IBuildStrategyCompiler" /> with the default configuration for creating an
                <see cref="T:ModelBuilder.IBuildStrategy" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultBuildStrategyCompiler.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultBuildStrategyCompiler" /> class.
            </summary>
        </member>
        <member name="T:ModelBuilder.DefaultConstructorResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultConstructorResolver" />
                class is used to resolve a constructor for a type.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultConstructorResolver.Resolve(System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.MissingMemberException">
                The <paramref name="type" /> parameter does not have a public constructor and
                no arguments are supplied.
            </exception>
            <exception cref="T:System.MissingMemberException">
                The <paramref name="type" /> parameter does not have a constructor that
                matches the supplied arguments.
            </exception>
        </member>
        <member name="T:ModelBuilder.DefaultExecuteStrategy">
            <summary>
                The <see cref="T:ModelBuilder.DefaultExecuteStrategy`1" />
                class is used to create types and populate instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.CreateWith(System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.IValueGenerator" /> or <see cref="T:ModelBuilder.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Initialize(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildLog)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildLog" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Populate(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.IValueGenerator" /> or <see cref="T:ModelBuilder.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.AutoPopulateInstance(System.Object,System.Object[])">
            <summary>
                Populates the properties on the specified instance.
            </summary>
            <param name="instance">The instance to populate.</param>
            <param name="args">The constructor parameters for the instance.</param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Build(System.Type,System.String,System.Object,System.Object[])">
            <summary>
                Builds an instance of the specified type.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name this value is intended for.</param>
            <param name="context">The possible context object this value is being created for.</param>
            <param name="args">The arguements to create the instance with.</param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="type" /> parameter can not be created using this strategy.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.PopulateProperty(System.Object,System.Reflection.PropertyInfo)">
            <summary>
                Populates the specified property on the provided instance.
            </summary>
            <param name="instance">The instance being populated.</param>
            <param name="propertyInfo">The property to populate.</param>
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.BuildChain">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.Configuration">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.Log">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultExecuteStrategy`1">
            <summary>
                The <see cref="T:ModelBuilder.DefaultExecuteStrategy`1" />
                class is used to create and populate <typeparamref name="T" /> instances.
            </summary>
            <typeparam name="T">The type of instance to create and populate.</typeparam>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.CreateWith(System.Object[])">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.IValueGenerator" /> or <see cref="T:ModelBuilder.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.Populate(`0)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.IValueGenerator" /> or <see cref="T:ModelBuilder.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="T:ModelBuilder.DefaultPropertyResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultPropertyResolver" />
                class is used to provie default logic for resolving property information.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.CanPopulate(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.ShouldPopulateProperty(ModelBuilder.IBuildConfiguration,System.Object,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.DefaultTypeCreator" />
                class is used to create an instance of a type using the constructors that match any arguments supplied.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultTypeCreator.CreateInstance(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultTypeCreator.PopulateInstance(System.Object,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DomainNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.DomainNameValueGenerator" />
                class is used to generate random domain name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.DomainNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DomainNameValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.DomainNameValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DomainNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.EmailValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.EmailValueGenerator" />
                class is used to generate strings that should represent an email.
            </summary>
        </member>
        <member name="M:ModelBuilder.EmailValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.EmailValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.EmailValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.EmailValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.EmailValueGenerator.Domain">
            <summary>
                Gets the domain for the email address.
            </summary>
            <value>The domain part of the email address.</value>
        </member>
        <member name="T:ModelBuilder.EnumerableTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.EnumerableTypeCreator" />
                class is used to create an instance from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> type.
            </summary>
        </member>
        <member name="M:ModelBuilder.EnumerableTypeCreator.CanCreate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.EnumerableTypeCreator.CanPopulate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.EnumerableTypeCreator.CreateChildItem(System.Type,ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Creates a child item given the context of a possible previous item being created.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="previousItem">The previous item generated, or <c>null</c>.</param>
            <returns>The new item generated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.EnumerableTypeCreator.CreateInstance(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.EnumerableTypeCreator.PopulateInstance(System.Object,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.EnumerableTypeCreator.DefaultAutoPopulateCount">
            <summary>
                Gets or sets how many instances will be auto-populated into the list by default when the
                <see cref="T:ModelBuilder.EnumerableTypeCreator" /> is created.
            </summary>
        </member>
        <member name="P:ModelBuilder.EnumerableTypeCreator.AutoDetectConstructor">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.EnumerableTypeCreator.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.EnumerableTypeCreator.AutoPopulateCount">
            <summary>
                Gets or sets how many instances will be auto-populated into the list.
            </summary>
        </member>
        <member name="P:ModelBuilder.EnumerableTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.EnumValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.EnumValueGenerator" />
                class is used to generate random enum values.
            </summary>
        </member>
        <member name="M:ModelBuilder.EnumValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.EnumValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRule">
            <summary>
            The <see cref="T:ModelBuilder.ExecuteOrderRule"/>
            class is used to define the order of property population.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRule.#ctor(System.Func{System.Type,System.String,System.Boolean},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRule"/> class.
            </summary>
            <param name="evaluator">The function that determines whether the rule is a match.</param>
            <param name="priority">The priority of the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="evaluator"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRule.#ctor(System.Type,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRule"/> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyExpression">The property name regular expression that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> and <paramref name="propertyExpression"/> parameters are both null.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRule.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRule"/> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyName">The property name that matches the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> and <paramref name="propertyName"/> parameters are both null.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRule.IsMatch(System.Type,System.String)">
            <summary>
            Gets whether the specified type and property name match this rule.
            </summary>
            <param name="type">The type to match.</param>
            <param name="propertyName">The property name to match.</param>
            <returns><c>true</c> if the rule matches the specified type and property name; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRule.Priority">
            <summary>
            Gets the priority for this rule.
            </summary>
        </member>
        <member name="T:ModelBuilder.ExecuteStrategyExtensions">
            <summary>
                The <see cref="T:ModelBuilder.Extensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IExecuteStrategy`1" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteStrategyExtensions.Create``1(ModelBuilder.IExecuteStrategy{``0})">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the specified execute strategy.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="executeStrategy">The execute strategy to create the instance with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteStrategyExtensions.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <summary>
                Creates an instance of a type using the specified execute strategy.
            </summary>
            <param name="executeStrategy">The execute strategy to create the instance with.</param>
            <param name="instanceType">The type of instance to create.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.ExpressionExtensions">
            <summary>
            The <see cref="T:ModelBuilder.Extensions"/>
            class provides extension methods for the <see cref="T:System.Linq.Expressions.Expression`1"/> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExpressionExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the property from the specified expression.
            </summary>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T"/></param>
            <returns>The property in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression"/> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression"/> parameter does not match a property on the type to generate.</exception>
        </member>
        <member name="T:ModelBuilder.Extensions">
            <summary>
            The <see cref="T:ModelBuilder.Extensions"/>
            class provides common extension methods.
            </summary>
        </member>
        <member name="M:ModelBuilder.Extensions.IsNullable(System.Type)">
            <summary>
            Gets whether the specified type is a nullable type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns><c>true</c> if the type is nullable; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Extensions.Set``1(``0,System.Action{``0})">
            <summary>
            Makes a change to the instance using the specified action.
            </summary>
            <typeparam name="T">The type of instance being changed.</typeparam>
            <param name="instance">The instance to update.</param>
            <param name="action">The action to run against the instance.</param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Extensions.SetEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Extensions.SetEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Extensions.SetEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>
            Makes a change to each instance using the specified action.
            </summary>
            <typeparam name="T">The type of instance being changed.</typeparam>
            <param name="instances">The instances to update.</param>
            <param name="action">The action to run against the instance.</param>
            <returns>The updated instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.FirstNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.FirstNameValueGenerator" />
                class is used to generate random first name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.FirstNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.FirstNameValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.FirstNameValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.FirstNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.GenderValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.GenderValueGenerator" />
                class is used to generate random gender values.
            </summary>
        </member>
        <member name="M:ModelBuilder.GenderValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.GenderValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.GenderValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.GenderValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.GuidValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.GuidValueGenerator" />
                class is used to generate <see cref="T:System.Guid" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.GuidValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.GuidValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.GuidValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.IBuildConfiguration">
            <summary>
                The <see cref="T:ModelBuilder.IBuildStrategy" />
                interface defines the configuration used to create and populate instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ConstructorResolver">
            <summary>
                Gets the constructor resolver used to create an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.CreationRules">
            <summary>
                Gets the creation rules used to quickly generate values without invoking <see cref="T:ModelBuilder.ITypeCreator" /> or
                <see cref="T:ModelBuilder.IValueGenerator" /> instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ExecuteOrderRules">
            <summary>
                Gets the execute order rules used to determine the order that properties are populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.IgnoreRules">
            <summary>
                Gets the ignore rules used to skip over property population.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.PostBuildActions">
            <summary>
                Gets the post build actions used to modify instances after they have been created or populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.PropertyResolver">
            <summary>
                Gets the property resolver used to populate an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.TypeCreators">
            <summary>
                Gets the type creators used to create instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ValueGenerators">
            <summary>
                Gets the value generators used to generate flat values.
            </summary>
        </member>
        <member name="T:ModelBuilder.IBuildLog">
            <summary>
                The <see cref="T:ModelBuilder.IBuildLog" />
                interface defines the build operations that can be logged.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildLog.BuildFailure(System.Exception)">
            <summary>
                Logs a build failure
            </summary>
            <param name="ex">The expception to log.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CircularReferenceDetected(System.Type)">
            <summary>
                Logs that a circular reference was detected in the build chain.
            </summary>
            <param name="type">The type to create.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.Clear">
            <summary>
                Clears the current build log.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedParameter(System.Type,System.Type,System.String,System.Object)">
            <summary>
                Logs that a parameter has been created for a constructor.
            </summary>
            <param name="instanceType">The type of instance to create.</param>
            <param name="parameterType">The parameter type being created.</param>
            <param name="parameterName">The name of the constructor parameter.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedProperty(System.Type,System.String,System.Object)">
            <summary>
                Logs that a property has been created for an instance.
            </summary>
            <param name="propertyType">The property type being created.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedType(System.Type,System.Object)">
            <summary>
                Logs that a type has been created.
            </summary>
            <param name="type">The type created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingParameter(System.Type,System.Type,System.String,System.Object)">
            <summary>
                Logs that a parameter is being created for a constructor.
            </summary>
            <param name="instanceType">The type of instance to create.</param>
            <param name="parameterType">The parameter type being created.</param>
            <param name="parameterName">The name of the constructor parameter.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingProperty(System.Type,System.String,System.Object)">
            <summary>
                Logs that a property is being created for an instance.
            </summary>
            <param name="propertyType">The property type being created.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingType(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a type is being created.
            </summary>
            <param name="type">The type to create.</param>
            <param name="creatorType">The type of creator used to create the type.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingValue(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a value is being created.
            </summary>
            <param name="type">The type to create.</param>
            <param name="generatorType">The type of generator used to create the value.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.IgnoringProperty(System.Type,System.String,System.Object)">
            <summary>
                Logs that a property is being ignored for an instance.
            </summary>
            <param name="propertyType">The property type being ignored.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PopulatedInstance(System.Object)">
            <summary>
                Logs that an instance has been populated.
            </summary>
            <param name="instance">The instance that has been populated.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PopulatingInstance(System.Object)">
            <summary>
                Logs that an instance is being populated.
            </summary>
            <param name="instance">The instance being populated.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PostBuildAction(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a type is running through post build actions.
            </summary>
            <param name="type">The type to create.</param>
            <param name="postBuildType">The type of the post build action.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="P:ModelBuilder.IBuildLog.Output">
            <summary>
                Gets the output of the build log.
            </summary>
        </member>
        <member name="T:ModelBuilder.IBuildStrategy">
            <summary>
                The <see cref="T:ModelBuilder.IBuildStrategy" />
                interface defines the members used to create and populate instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildStrategy.GetBuildLog">
            <summary>
                Gets the build log for items created by this strategy.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildStrategy.GetExecuteStrategy``1">
            <summary>
                Gets an <see cref="T:ModelBuilder.IExecuteStrategy`1" /> for the specified <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of instance to generate with the strategy.</typeparam>
            <returns>A new execute strategy.</returns>
        </member>
        <member name="T:ModelBuilder.IBuildStrategyCompiler">
            <summary>
                The <see cref="T:ModelBuilder.IBuildStrategyCompiler" />
                interface defines the members to assist in creating new <see cref="T:ModelBuilder.IBuildStrategy" /> instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildStrategyCompiler.Compile">
            <summary>
                Compiles the configuration of this compiler into a new <see cref="T:ModelBuilder.IBuildStrategy" /> instance.
            </summary>
            <returns>A new builder strategy.</returns>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.ConstructorResolver">
            <summary>
                Gets or sets the constructor resolver used to create an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.CreationRules">
            <summary>
                Gets the creation rules used to quickly generate values without invoking <see cref="T:ModelBuilder.ITypeCreator" /> or
                <see cref="T:ModelBuilder.IValueGenerator" /> instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.ExecuteOrderRules">
            <summary>
                Gets the execute order rules used to determine the order that properties are populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.IgnoreRules">
            <summary>
                Gets the ignore rules used to skip over property population.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.PostBuildActions">
            <summary>
                Gets the post build actions used to modify instances after they have been created or populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.PropertyResolver">
            <summary>
                Gets or sets the property resolver used to create an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.TypeCreators">
            <summary>
                Gets the type creators used to create instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildStrategyCompiler.ValueGenerators">
            <summary>
                Gets the value generators used to generate flat values.
            </summary>
        </member>
        <member name="T:ModelBuilder.ICompilerModule">
            <summary>
                The <see cref="T:ModelBuilder.ICompilerModule" />
                interface is used to define out to configure a <see cref="T:ModelBuilder.IBuildStrategyCompiler" /> using convention based
                scanning.
            </summary>
        </member>
        <member name="M:ModelBuilder.ICompilerModule.Configure(ModelBuilder.IBuildStrategyCompiler)">
            <summary>
                Configures the specified compiler.
            </summary>
            <param name="compiler">The compiler to configure.</param>
        </member>
        <member name="T:ModelBuilder.IConstructorResolver">
            <summary>
            The <see cref="T:ModelBuilder.IConstructorResolver"/>
            interface defines the members for resolving constructors.
            </summary>
        </member>
        <member name="M:ModelBuilder.IConstructorResolver.Resolve(System.Type,System.Object[])">
            <summary>
            Returns the <see cref="T:System.Reflection.ConstructorInfo"/> for the type, matching on the specified arguments.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="args">The optional argument list for the constructor.</param>
            <returns>The constructor matching the type and arguments; or <c>null</c> if no constructor is found.</returns>
        </member>
        <member name="T:ModelBuilder.IExecuteStrategy">
            <summary>
                The <see cref="T:ModelBuilder.IExecuteStrategy" />
                interface defines the dependencies used to create and populate instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.CreateWith(System.Type,System.Object[])">
            <summary>
                Creates a new instance of the specified type with optional constructor arguments.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">The constructor arguments of the type.</param>
            <returns>A new instance of the specified type.</returns>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.Initialize(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildLog)">
            <summary>
                Initializes the execute strategy with a build configuration.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildLog">The build log.</param>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.Populate(System.Object)">
            <summary>
                Populates values onto settable properties of the specified instance.
            </summary>
            <param name="instance">The instance to populate.</param>
            <returns>The populated object.</returns>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.BuildChain">
            <summary>
                Gets the build chain for objects up to the current build execution.
            </summary>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.Configuration">
            <summary>
                Gets the build configuration.
            </summary>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.Log">
            <summary>
                Gets the build log for items created by this strategy.
            </summary>
        </member>
        <member name="T:ModelBuilder.IExecuteStrategy`1">
            <summary>
            The <see cref="T:ModelBuilder.IExecuteStrategy`1"/>
            interface defines the members for creating and populating <typeparamref name="T"/> instances.
            </summary>
            <typeparam name="T">The type to create or populate.</typeparam>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy`1.CreateWith(System.Object[])">
            <summary>
            Creates a new instance of <typeparamref name="T"/> using the specified arguments.
            </summary>
            <param name="args">The constructor arguments of the type.</param>
            <returns>A new instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy`1.Populate(`0)">
            <summary>
            Populates values onto settable properties of the specified instance.
            </summary>
            <param name="instance">The instance to populate.</param>
            <returns>A new instance of <typeparamref name="T"/></returns>
        </member>
        <member name="T:ModelBuilder.IgnoreRule">
            <summary>
            The <see cref="T:ModelBuilder.IgnoreRule"/>
            class describes a property on a type that should not be set when populating an instance.
            </summary>
        </member>
        <member name="M:ModelBuilder.IgnoreRule.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelBuilder.IgnoreRule"/> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="propertyName">The property name that matches the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="propertyName"/> parameter is null, only contains whitespace or is empty.</exception>
        </member>
        <member name="P:ModelBuilder.IgnoreRule.PropertyName">
            <summary>
            Gets the property name to ignore.
            </summary>
        </member>
        <member name="P:ModelBuilder.IgnoreRule.TargetType">
            <summary>
            Gets the target type to evaluate.
            </summary>
        </member>
        <member name="T:ModelBuilder.IPAddressValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.IPAddressValueGenerator" />
                class is used to generate IP Address values.
            </summary>
        </member>
        <member name="M:ModelBuilder.IPAddressValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.IPAddressValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.IPAddressValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.IPostBuildAction">
            <summary>
            The <see cref="T:ModelBuilder.IPostBuildAction"/>
            interface defines the members for running post-build actions on models created by <see cref="T:ModelBuilder.IExecuteStrategy"/>.
            </summary>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.Execute(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <summary>
            Executes the post build action and returns the result.
            </summary>
            <param name="type">The type of value to evaluate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <summary>
            Returns whether the specified type is supported by this type.
            </summary>
            <param name="type">The type to evaulate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <returns><c>true</c> if the type is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.IPostBuildAction.Priority">
            <summary>
            Gets the priority for this type.
            </summary>
        </member>
        <member name="T:ModelBuilder.IPropertyResolver">
            <summary>
                The <see cref="T:ModelBuilder.IPropertyResolver" />
                interface defines the members for resolving information about properties.
            </summary>
        </member>
        <member name="M:ModelBuilder.IPropertyResolver.CanPopulate(System.Reflection.PropertyInfo)">
            <summary>
                Determines whether the specified property can be populated.
            </summary>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if the property can be populated; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.IPropertyResolver.ShouldPopulateProperty(ModelBuilder.IBuildConfiguration,System.Object,System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Determines whether the property should be populated with a value based on arguments provided.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="instance">The instance being populated.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <param name="args">The constructor parameters for the instance.</param>
            <returns><c>true</c> if the property should be populated; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModelBuilder.IRandomGenerator">
            <summary>
            The <see cref="T:ModelBuilder.IRandomGenerator"/>
            interface defines the members for generating random numeric values.
            </summary>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.GetMax(System.Type)">
            <summary>
            Gets the maxmum value for the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The maximum value for the type.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.GetMin(System.Type)">
            <summary>
            Gets the minimum value for the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The minimum value for the type.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.IsSupported(System.Type)">
            <summary>
            Gets whether the specified type is supported by the generator.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if the type is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.NextValue(System.Type,System.Object,System.Object)">
            <summary>
            Generates a new random value constrained to the specified minimum and maximum boundaries.
            </summary>
            <param name="type">The type of number to generate.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.NextValue(System.Byte[])">
            <summary>
            Populates the specified buffer with random bytes.
            </summary>
        </member>
        <member name="T:ModelBuilder.ITypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.ITypeCreator" />
                interface defines the members for creating an instance of a type.
            </summary>
        </member>
        <member name="M:ModelBuilder.ITypeCreator.CanCreate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <summary>
                Returns whether this type creator can create the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <returns><c>true</c> if this creator can create the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.ITypeCreator.CanPopulate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <summary>
                Returns whether this type creator can populate the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <returns><c>true</c> if this creator can populate the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.ITypeCreator.Create(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.ITypeCreator.Populate(System.Object,ModelBuilder.IExecuteStrategy)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="instance">The instance to populate.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="P:ModelBuilder.ITypeCreator.AutoDetectConstructor">
            <summary>
                Gets whether this creator identifies that dynamic constructor resolution and parameter building should occur.
            </summary>
            <remarks>
                Where the value is <c>true</c>, the <see cref="T:ModelBuilder.IExecuteStrategy`1" /> should find the best available constructor
                and dynamic generate the parameters for it.
                Where the value is <c>false</c>, the default constructor on the type should be evaluated.
            </remarks>
        </member>
        <member name="P:ModelBuilder.ITypeCreator.AutoPopulate">
            <summary>
                Gets whether this creator identifies that properties on the instance should be automatically populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.ITypeCreator.Priority">
            <summary>
                Gets the priority for this creator.
            </summary>
        </member>
        <member name="T:ModelBuilder.IValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.IValueGenerator" />
                interface defines the members for generating values.
            </summary>
            <remarks>
                Values generated by <see cref="T:ModelBuilder.IValueGenerator" /> are different to types created by <see cref="T:ModelBuilder.ITypeCreator" /> in
                that they do not have their properties set after construction.
                Value types and immutable types (strings for example) should use <see cref="T:ModelBuilder.IValueGenerator" /> to create them
                rather than <see cref="T:ModelBuilder.ITypeCreator" />.
            </remarks>
        </member>
        <member name="M:ModelBuilder.IValueGenerator.Generate(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Generates a new value of the specified type.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.IValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <summary>
                Returns whether the specified type is supported by this generator.
            </summary>
            <param name="type">The type to evaulate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <returns><c>true</c> if the type is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.IValueGenerator.Priority">
            <summary>
                Gets the priority for this generator.
            </summary>
        </member>
        <member name="T:ModelBuilder.LastNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.LastNameValueGenerator" />
                class is used to generate random last name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.LastNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.LastNameValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.LastNameValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.LastNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.MailinatorEmailValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.MailinatorEmailValueGenerator" />
                class is used to generate email addresses that always point to the mailinator.com domain.
            </summary>
        </member>
        <member name="P:ModelBuilder.MailinatorEmailValueGenerator.Domain">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.Model">
            <summary>
                The <see cref="T:ModelBuilder.Model" />
                class provides the main entry point into generating model instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.Model.Create(System.Type)">
            <summary>
                Creates an instance of a type using the default build and execute strategies.
            </summary>
            <param name="instanceType">The type of instance to create.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Model.Create``1">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the default build and execute strategies.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ModelBuilder.Model.CreateWith(System.Type,System.Object[])">
            <summary>
                Creates an instance of a type using the default build and execute strategies and constructor
                arguments.
            </summary>
            <param name="instanceType">The type of instance to create.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Model.CreateWith``1(System.Object[])">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the default build and execute strategies and constructor
                arguments.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ModelBuilder.Model.For``1">
            <summary>
                Returns a default execute strategy with a default build strategy.
            </summary>
            <typeparam name="T">The type of instance to create using the execute strategy.</typeparam>
            <returns>A new execute strategy.</returns>
        </member>
        <member name="M:ModelBuilder.Model.Ignoring``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns a <see cref="T:ModelBuilder.IBuildStrategy" /> with a new <see cref="T:ModelBuilder.IgnoreRule" /> that matches the specified expression.
            </summary>
            <typeparam name="T">The type of instance that matches the rule.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>A new build strategy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.Model.Populate``1(``0)">
            <summary>
                Populates the properties of the specified instance using the default build and execute strategies.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ModelBuilder.Model.Using``1">
            <summary>
                Returns a new <see cref="T:ModelBuilder.IBuildStrategy" /> of the specified type.
            </summary>
            <typeparam name="T">The type of build strategy to create.</typeparam>
            <returns>A new build strategy.</returns>
        </member>
        <member name="M:ModelBuilder.Model.With``1">
            <summary>
                Returns a new execute strategy using <see cref="T:ModelBuilder.BuildStrategy" />.
            </summary>
            <typeparam name="T">The type of execute strategy to create.</typeparam>
            <returns>A new execute strategy.</returns>
        </member>
        <member name="P:ModelBuilder.Model.BuildStrategy">
            <summary>
                Gets or sets the current build strategy to use in this application domain.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
        </member>
        <member name="P:ModelBuilder.Model.DefaultBuildStrategy">
            <summary>
                Gets or sets the default build strategy.
            </summary>
        </member>
        <member name="T:ModelBuilder.NumericValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.NumericValueGenerator" />
                class is used to generate random numeric values.
            </summary>
        </member>
        <member name="M:ModelBuilder.NumericValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.NumericValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.NumericValueGenerator.GetMaximum(System.Type,System.String,System.Object)">
            <summary>
                Returns the maximum value for the specified generation target.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="context">The possible context object the value is being created for.</param>
            <returns>The maximum value allowed to be generated.</returns>
        </member>
        <member name="M:ModelBuilder.NumericValueGenerator.GetMinimum(System.Type,System.String,System.Object)">
            <summary>
                Returns the minimum value for the specified generation target.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="context">The possible context object the value is being created for.</param>
            <returns>The minimum value allowed to be generated.</returns>
        </member>
        <member name="T:ModelBuilder.PhoneValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.AgeValueGenerator" />
                class is used to generate phone numbers.
            </summary>
        </member>
        <member name="M:ModelBuilder.PhoneValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.PhoneValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.PhoneValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.PhoneValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.PostCodeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.PostCodeValueGenerator" />
                class is used to generate random post code values.
            </summary>
        </member>
        <member name="M:ModelBuilder.PostCodeValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.PostCodeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.PostCodeValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.PostCodeValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ArgumentException_NullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The value cannot be null, white space or empty.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.BuildStrategy_BuildLogRequired">
            <summary>
              Looks up a localized string similar to {0} did not return an {1} instance. A build log is required to create an {2} instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.BuildStrategyCompiler_NullConstructorResolver">
            <summary>
              Looks up a localized string similar to The ConstructorResolver is null. A constructor resolver must be provided in order to create a build strategy.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.BuildStrategyCompiler_NullPropertyResolver">
            <summary>
              Looks up a localized string similar to The PropertyResolver is null. A property resolver must be provided in order to create a build strategy.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ConstructorResolver_NoPublicConstructorFound">
            <summary>
              Looks up a localized string similar to No public constructor is available for type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ConstructorResolver_NoValidConstructorFound">
            <summary>
              Looks up a localized string similar to No valid constructors are available for type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CircularReferenceDetected">
            <summary>
              Looks up a localized string similar to Detected circular reference building type {0}, using previously created instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedParameter">
            <summary>
              Looks up a localized string similar to Created parameter {0} ({1}) for type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedProperty">
            <summary>
              Looks up a localized string similar to Created property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedType">
            <summary>
              Looks up a localized string similar to End creating type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingParameter">
            <summary>
              Looks up a localized string similar to Creating parameter {0} ({1}) for type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingProperty">
            <summary>
              Looks up a localized string similar to Creating property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingType">
            <summary>
              Looks up a localized string similar to Start creating type {0} using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingValue">
            <summary>
              Looks up a localized string similar to Creating {0} value using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_IgnoringProperty">
            <summary>
              Looks up a localized string similar to Ignoring property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PopulatedInstance">
            <summary>
              Looks up a localized string similar to End populating instance {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PopulatingInstance">
            <summary>
              Looks up a localized string similar to Start populating instance {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PostBuild">
            <summary>
              Looks up a localized string similar to Running PostBuild on {0} using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_ExpressionNotPropertyFormat">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; does not refer to a property.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_ExpressionTargetsWrongType">
            <summary>
              Looks up a localized string similar to The expression returned a property {0} that was not defined on type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_GenerationNotSupportedFormat">
            <summary>
              Looks up a localized string similar to {0} does not support the {1} type and reference name {2} in the context of the current build chain.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_TypeNotSupportedFormat">
            <summary>
              Looks up a localized string similar to {0} does not support the {1} type.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ExecuteStrategy_NoBuildChain">
            <summary>
              Looks up a localized string similar to The BuildChain property on the execution strategy is null.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.NoMatchingCreatorOrGeneratorFound">
            <summary>
              Looks up a localized string similar to No supporting ITypeCreator or IValueGenerator was found to build the type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.NoMatchingCreatorOrGeneratorFoundWithName">
            <summary>
              Looks up a localized string similar to No supporting ITypeCreator or IValueGenerator was found to build the type &apos;{0}&apos; for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.NoMatchingCreatorOrGeneratorFoundWithNameAndContext">
            <summary>
              Looks up a localized string similar to No supporting ITypeCreator or IValueGenerator was found to build the type &apos;{0}&apos; for &apos;{1}&apos; on type &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.NoTargetTypeOrPropertyExpression">
            <summary>
              Looks up a localized string similar to Either targetType or propertyExpression must be supplied.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.NoTargetTypeOrPropertyName">
            <summary>
              Looks up a localized string similar to Either targetType or propertyName must be supplied.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.People">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;People xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&lt;Person&gt;&lt;Address&gt;997 Emmet Circle&lt;/Address&gt;&lt;City&gt;Newark&lt;/City&gt;&lt;Company&gt;Tanoodle&lt;/Company&gt;&lt;Country&gt;Benin&lt;/Country&gt;&lt;Domain&gt;google.ca&lt;/Domain&gt;&lt;Email&gt;tspencer0@is.gd&lt;/Email&gt;&lt;FirstName&gt;Theresa&lt;/FirstName&gt;&lt;Gender&gt;Female&lt;/Gender&gt;&lt;LastName&gt;Spencer&lt;/LastName&gt;&lt;Phone&gt;1-(302)560-3674&lt;/Phone&gt;&lt;PostCode&gt;19714&lt;/PostCode&gt;&lt;State&gt;Delaware&lt;/State&gt;&lt;TimeZone&gt;America/Mexico_City&lt;/TimeZ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.RelativeValueGenerator_NoSourceExpression">
            <summary>
              Looks up a localized string similar to This generator was not created with a source expression. Call GetValue&lt;T&gt;(expression, context) instead.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Rule_InvalidMatch">
            <summary>
              Looks up a localized string similar to The rule {0} does not support type &apos;{1}&apos; for &apos;{2}&apos;.
            </summary>
        </member>
        <member name="T:ModelBuilder.PropertyExpression">
            <summary>
            The <see cref="T:ModelBuilder.PropertyExpression"/>
            class defines regular expressions for matching values.
            </summary>
        </member>
        <member name="F:ModelBuilder.PropertyExpression.FirstName">
            <summary>
            Defines the expression for matching first/given name properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.PropertyExpression.Gender">
            <summary>
            Defines the expression for matching gender/sex properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.PropertyExpression.LastName">
            <summary>
            Defines the expression for matching last name/surname properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.PropertyExpression.Email">
            <summary>
            Defines the expression for matching email properties.
            </summary>
        </member>
        <member name="T:ModelBuilder.PropertyResolverExtensions">
            <summary>
                The
            </summary>
        </member>
        <member name="M:ModelBuilder.PropertyResolverExtensions.GetProperties(ModelBuilder.IPropertyResolver,System.Type)">
            <summary>
                Gets the properties on the type that are supported for data generation.
            </summary>
            <param name="resolver">The property resolver.</param>
            <param name="type">The type to evaluate.</param>
            <returns>The supported properties on the type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resolver" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.PropertyResolverExtensions.GetProperties(ModelBuilder.IPropertyResolver,System.Type,System.Text.RegularExpressions.Regex)">
            <summary>
                Gets the properties on the type that have their name match the specified expression.
            </summary>
            <param name="resolver">The property resolver.</param>
            <param name="type">The type to evaluate.</param>
            <param name="expression">The property name match expression.</param>
            <returns>The matching properties.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="resolver" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.RandomGenerator">
            <summary>
                The <see cref="T:ModelBuilder.RandomGenerator" />
                class is used to build random numeric values and byte arrays.
            </summary>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.GetMax(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.RandomGenerator.GetMin(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.RandomGenerator.IsSupported(System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.NextValue(System.Type,System.Object,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="min" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="max" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.NextValue(System.Byte[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.RandomGeneratorExtensions">
            <summary>
            The <see cref="T:ModelBuilder.RandomGeneratorExtensions"/>
            class provides extension methods for the <see cref="T:ModelBuilder.IRandomGenerator"/> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator)">
            <summary>
            Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator,``0)">
            <summary>
            Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator,``0,``0)">
            <summary>
            Generates a new random value constrained to the specified minimum and maximum boundaries.
            </summary>
            <param name="generator">The generator.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue(ModelBuilder.IRandomGenerator,System.Type)">
            <summary>
            Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="type">The type of number to generate.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue(ModelBuilder.IRandomGenerator,System.Type,System.Object)">
            <summary>
            Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="max">The maximum value.</param>
            <param name="type">The type of number to generate.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.RelativeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.RelativeValueGenerator" />
                class is used to assist in generating a value that is related to another value for a given context.
            </summary>
        </member>
        <member name="M:ModelBuilder.RelativeValueGenerator.#ctor(System.Text.RegularExpressions.Regex,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.RelativeValueGenerator" /> class.
            </summary>
            <param name="targetNameExpression">The expression to match the target property or parameter.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetNameExpression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RelativeValueGenerator.#ctor(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.RelativeValueGenerator" /> class.
            </summary>
            <param name="targetNameExpression">The expression to match the target property or parameter.</param>
            <param name="sourceNameExpression">The expression to match the source property.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetNameExpression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceNameExpression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RelativeValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.RelativeValueGenerator.GetSourceValue``1(System.Object)">
            <summary>
                Gets the source property value for the specified context.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="context">The context to use for reference informamtion.</param>
            <returns>The string value of the source property.</returns>
            <exception cref="T:System.InvalidOperationException">The generator was not created with a source expression.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.RelativeValueGenerator.GetValue``1(System.Text.RegularExpressions.Regex,System.Object)">
            <summary>
                Gets the property value using the specified expression and context.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="expression">The expression used to identify the property.</param>
            <param name="context">The context to use for reference informamtion.</param>
            <returns>The string value of the source property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
        </member>
        <member name="T:ModelBuilder.StateValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.StateValueGenerator" />
                class is used to generate state addressing values.
            </summary>
        </member>
        <member name="M:ModelBuilder.StateValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.StateValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.StateValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.StateValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.StringValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.StringValueGenerator" />
                class is used to generate random <see cref="T:System.String" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.StringValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.StringValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.StringValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.SuburbValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.SuburbValueGenerator" />
                class is used to generate random suburb values.
            </summary>
        </member>
        <member name="M:ModelBuilder.SuburbValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.SuburbValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.SuburbValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.SuburbValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TimeZoneInfoValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.TimeZoneInfoValueGenerator" />
                class is used to generate random <see cref="T:System.TimeZoneInfo"/> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.TimeZoneInfoValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.TimeZoneInfoValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.TimeZoneInfoValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TimeZoneValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.TimeZoneValueGenerator" />
                class is used to generate IANA time zone values.
            </summary>
        </member>
        <member name="M:ModelBuilder.TimeZoneValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.TimeZoneValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.TimeZoneValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TimeZoneValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreatorBase">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreatorBase" />
                class is used to provide the common implementation of a type creator.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.CanCreate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.CanPopulate(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.Create(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.Populate(System.Object,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.CreateInstance(System.Type,System.String,ModelBuilder.IExecuteStrategy,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.PopulateInstance(System.Object,ModelBuilder.IExecuteStrategy)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="instance">The instance to populate.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.VerifyCreateRequest(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Verifies that the minimum required information has been provided in order to create an instance.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name this value is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">This generator does not support creating the requested value.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreatorBase.VerifyPopulateRequest(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Verifies that the minimum required information has been provided in order to populate an instance.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">This generator does not support creating the requested value.</exception>
        </member>
        <member name="P:ModelBuilder.TypeCreatorBase.AutoDetectConstructor">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreatorBase.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreatorBase.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreatorBase.Generator">
            <summary>
                Gets the random generator for this instance.
            </summary>
        </member>
        <member name="T:ModelBuilder.UriValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.UriValueGenerator" />
                class is used to generate random uri values.
            </summary>
        </member>
        <member name="M:ModelBuilder.UriValueGenerator.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.UriValueGenerator.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.UriValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGeneratorBase">
            <summary>
                The <see cref="T:ModelBuilder.ValueGeneratorBase" />
                class provides the base implementation for generating values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorBase.Generate(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGeneratorBase.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGeneratorBase.GenerateValue(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Generates a new value with the provided context.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorBase.VerifyGenerateRequest(System.Type,System.String,ModelBuilder.IExecuteStrategy)">
            <summary>
                Verifies that the minimum required information has been provided in order to generate a value.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name this value is intended for.</param>
            <param name="executeStrategy">The execution strategy.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">This generator does not support creating the requested value.</exception>
        </member>
        <member name="P:ModelBuilder.ValueGeneratorBase.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGeneratorBase.Generator">
            <summary>
                Gets the random generator for this instance.
            </summary>
        </member>
        <member name="T:ModelBuilder.ValueGeneratorMatcher">
            <summary>
                The <see cref="T:ModelBuilder.ValueGeneratorMatcher" />
                class is used to provide the common logic for evaluating whether a generator matches a target to generate for.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorMatcher.#ctor(System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorMatcher.#ctor(System.String,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="referenceName">Identifies the possible parameter or property name the generator can match.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="referenceName" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorMatcher.#ctor(System.Text.RegularExpressions.Regex,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="expression">Identifies the possible parameter or property name regular expression the generator can match.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGeneratorMatcher.IsSupported(System.Type,System.String,System.Collections.Generic.LinkedList{System.Object})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
        </member>
    </members>
</doc>
